import heapq

class GerenciadorTransporte:
    def __init__(self):
        self.rotas = []
    
    def adicionar_rota(self, origem, destino, horario, tempo_viagem, custo, baldeacoes):
        self.rotas.append({
            'origem': origem,
            'destino': destino,
            'horario': horario,
            'tempo_viagem': tempo_viagem,
            'custo': custo,
            'baldeacoes': baldeacoes
        })
    
    def buscar_melhores_rotas(self, origem, destino, criterio='tempo', limite=3):
        rotas_filtradas = [r for r in self.rotas 
                          if r['origem'].lower() == origem.lower() 
                          and r['destino'].lower() == destino.lower()]
        
        if criterio == 'tempo':
            rotas_ordenadas = sorted(rotas_filtradas, key=lambda x: x['tempo_viagem'])
        elif criterio == 'custo':
            rotas_ordenadas = sorted(rotas_filtradas, key=lambda x: x['custo'])
        elif criterio == 'baldeacoes':
            rotas_ordenadas = sorted(rotas_filtradas, key=lambda x: x['baldeacoes'])
        else:
            rotas_ordenadas = rotas_filtradas
        
        return rotas_ordenadas[:limite]
    
    def proximos_horarios(self, ponto, limite=5):
        horarios = []
        for rota in self.rotas:
            if rota['origem'].lower() == ponto.lower():
                heapq.heappush(horarios, (rota['horario'], rota))
        
        resultados = []
        while horarios and len(resultados) < limite:
            resultados.append(heapq.heappop(horarios)[1])
        
        return resultados

# Exemplo de uso
if __name__ == "__main__":
    transporte = GerenciadorTransporte()
    transporte.adicionar_rota("Centro", "Bairro A", "08:00", 30, 4.50, 0)
    transporte.adicionar_rota("Centro", "Bairro A", "08:30", 25, 5.50, 1)
    transporte.adicionar_rota("Centro", "Bairro A", "09:00", 35, 3.50, 2)
    
    print("Melhores rotas do Centro para Bairro A por tempo:")
    for rota in transporte.buscar_melhores_rotas("Centro", "Bairro A", 'tempo'):
        print(f"{rota['horario']} - {rota['tempo_viagem']} min")
    
    print("\nPróximos horários do Centro:")
    for rota in transporte.proximos_horarios("Centro"):
        print(f"{rota['destino']} às {rota['horario']}")

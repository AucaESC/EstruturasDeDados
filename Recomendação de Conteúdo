import heapq
from collections import defaultdict

class SistemaRecomendacao:
    def __init__(self):
        self.conteudos = []
        self.historico_usuarios = defaultdict(list)
    
    def adicionar_conteudo(self, id_conteudo, titulo, genero, popularidade, relevancia, data_publicacao):
        self.conteudos.append({
            'id': id_conteudo,
            'titulo': titulo,
            'genero': genero,
            'popularidade': popularidade,
            'relevancia': relevancia,
            'data': data_publicacao
        })
    
    def registrar_interacao(self, usuario, id_conteudo, rating):
        self.historico_usuarios[usuario].append((id_conteudo, rating))
    
    def recomendar_para_usuario(self, usuario, criterio='relevancia', limite=5):
        # Simples sistema de recomendação baseado no histórico
        generos_favoritos = defaultdict(int)
        for id_conteudo, rating in self.historico_usuarios[usuario]:
            conteudo = next(c for c in self.conteudos if c['id'] == id_conteudo)
            generos_favoritos[conteudo['genero']] += rating
        
        if not generos_favoritos:
            return self.ordenar_conteudos(criterio)[:limite]
        
        genero_principal = max(generos_favoritos, key=generos_favoritos.get)
        
        # Usar heap para eficiência na seleção dos top N itens
        heap = []
        for conteudo in self.conteudos:
            if conteudo['genero'] == genero_principal:
                if criterio == 'relevancia':
                    score = conteudo['relevancia']
                elif criterio == 'popularidade':
                    score = conteudo['popularidade']
                elif criterio == 'data':
                    score = conteudo['data'].timestamp()
                else:
                    score = 0
                
                if len(heap) < limite:
                    heapq.heappush(heap, (score, conteudo))
                else:
                    heapq.heappushpop(heap, (score, conteudo))
        
        return [conteudo for (score, conteudo) in sorted(heap, reverse=True)]
    
    def ordenar_conteudos(self, criterio):
        if criterio == 'relevancia':
            return sorted(self.conteudos, key=lambda x: x['relevancia'], reverse=True)
        elif criterio == 'popularidade':
            return sorted(self.conteudos, key=lambda x: x['popularidade'], reverse=True)
        elif criterio == 'data':
            return sorted(self.conteudos, key=lambda x: x['data'], reverse=True)
        else:
            return self.conteudos

# Exemplo de uso
if __name__ == "__main__":
    from datetime import datetime
    
    sistema = SistemaRecomendacao()
    sistema.adicionar_conteudo(1, "Filme A", "Ação", 85, 90, datetime(2023, 5, 15))
    sistema.adicionar_conteudo(2, "Filme B", "Comédia", 95, 80, datetime(2023, 6, 20))
    sistema.adicionar_conteudo(3, "Filme C", "Ação", 75, 95, datetime(2023, 7, 10))
    
    sistema.registrar_interacao("user1", 1, 5)
    sistema.registrar_interacao("user1", 3, 4)
    
    print("Recomendações para user1:")
    for conteudo in sistema.recomendar_para_usuario("user1"):
        print(conteudo['titulo'])
